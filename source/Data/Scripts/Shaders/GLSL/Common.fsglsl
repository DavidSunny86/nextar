
/******************************************************************/
/*                           Channels                             */
/******************************************************************/

#if !defined(HAS_NORMAL_MAP) && defined(HAS_NORMAL_CHANNEL)
	smooth in vec4 _oNormal;
   vec3 _iGetNormal() { return normalize(_oNormal.xyz); }
#endif

#ifdef HAS_BINORMAL_CHANNEL
	smooth in vec4 _oBiNormal;	
   vec3 _iGetBiNormal() { return normalize(_oBiNormal); }
#endif

#ifdef HAS_TANGENT_CHANNEL
	smooth in vec4 _oTangent;
   vec3 _iGetTangent() { return normalize(_oTangent); }
#endif

#ifdef HAS_TEXCOORD0_CHANNEL
	smooth in vec2 _oTexCoord0;
   vec2 _iGetTexCoord0() { return _oTexCoord0;  }
#endif

#ifdef HAS_TEXCOORD1_CHANNEL
	smooth out vec2 _oTexCoord1;
   vec2 _iGetTexCoord1() { return _oTexCoord1;  }
#endif


/******************************************************************/
/*                           Samplers                             */
/******************************************************************/
#ifdef HAS_DIFFUSE_MAP
	uniform sampler2D _sDiffuseMap;
	vec2 _vGetDiffuseTexCoord() {
		return _iGetTexCoord0();
	}
	vec4 _vSampleDiffuse(vec2 v) {
		return ( texture( _sDiffuseMap, v ) );
	}
#else
	vec2 _vGetDiffuseTexCoord() {
		return vec2( 0.0 );
	}

	vec4 _vSampleDiffuse(vec2 v) {
		return ( vec4( 1.0 ) );
	}
#endif
#ifdef HAS_NORMAL_MAP
	uniform sampler2D _sNormalMap;
	vec2 _vGetNormalTexCoord() {
		return _iGetTexCoord0();
	}
	vec4 _vSampleNormal(vec2 v) {
		return ( texture( _sNormalMap, v ) );
	}
	vec3 _vUnpackNormal(vec2 v) {
		vec2 n = _vSampleNormal(v).xy * 2.0 - 1.0;
		return vec3(n.x, n.y, sqrt(1 - (n.x*n.x) + (n.y*n.y)));
	}
#else
	vec4 _vSampleNormal(vec2 v) {
		return ( vec4( 0.0 ) );
	}
#endif
#ifdef HAS_SPECULAR_AND_GLOSS_MAP
	uniform sampler2D _sSpecularAndGlossMap;
	vec2 _vGetSpecularAndGlossTexCoord() {
		return _iGetTexCoord0();
	}

	vec4 _vSampleSpecularAndGloss(vec2 v) {
		return texture(_sSpecularAndGlossMap, v).rg;
	}
#else
	vec2 _vSampleSpecularAndGloss(vec2 v) {
		return ( vec2( 0.0 ) );
	}
#endif

