
/******************************************************************/
/*                           Channels                             */
/******************************************************************/

#ifdef HAS_NORMAL_CHANNEL_OUT
	smooth in vec4 oNormal;
   vec3 vGetNormal() { return normalize(oNormal.xyz); }

   vec3 vGetVertexNormal() {   return vGetNormal();   }
   #define F_vGetVertexNormal

#endif

#ifdef HAS_BINORMAL_CHANNEL_OUT
	smooth in vec4 oBiNormal;	
   vec3 vGetBiNormal() { return normalize(oBiNormal); }
#endif

#ifdef HAS_TANGENT_CHANNEL_OUT
	smooth in vec4 oTangent;
   vec3 vGetTangent() { return normalize(oTangent); }
#endif

#ifdef HAS_TEXCOORD0_CHANNEL_OUT
	smooth in vec2 oTexCoord0;
   vec2 vGetTexCoord0() { return oTexCoord0;  }
#endif

#ifdef HAS_TEXCOORD1_CHANNEL_OUT
	smooth in vec2 oTexCoord1;
   vec2 vGetTexCoord1() { return oTexCoord1;  }
#endif

#ifdef HAS_VERTEX_COLOR_CHANNEL_OUT
   smooth in vec4 oVertexColor;
   vec4 vGetVertexColor() { return oVertexColor; }
 #endif

 #ifdef HAS_EYEVERETX_CHANNEL_OUT
	smooth in vec4 oEyeVertex;
   vec3 vGetEyeVertex() { return oEyeVertex; }
#endif

/******************************************************************/
/*                           Samplers                             */
/******************************************************************/
#ifdef HAS_DIFFUSE_MAP
	uniform sampler2D sDiffuseMap;
	vec2 vGetDiffuseTexCoord() {
		return vGetTexCoord0();
	}
	vec4 vSampleDiffuse(vec2 v) {
		return ( texture( sDiffuseMap, v ) );
	}
   vec4 vGetDiffuseColor() {
		return ( vSampleDiffuse( vGetDiffuseTexCoord() ) );
	}
   vec4 vGetDiffuseColor(vec4 scaled) {
		return ( vSampleDiffuse( vGetDiffuseTexCoord() ) ) * scaled;
	}
#else
	vec2 vGetDiffuseTexCoord() {
		return vec2( 0.0 );
	}

	vec4 vSampleDiffuse(vec2 v) {
		return ( vec4( 1.0 ) );
	}
   vec4 vGetDiffuseColor() {
		return ( vSampleDiffuse( vGetDiffuseTexCoord() ) );
	}
   vec4 vGetDiffuseColor(vec4 scaled) {
		return scaled;
	}
#endif
#ifdef HAS_NORMAL_MAP
	uniform sampler2D sNormalMap;
	vec2 vGetNormalTexCoord() {
		return vGetTexCoord0();
	}
	vec4 vSampleNormal(vec2 v) {
		return ( texture( sNormalMap, v ) );
	}
	vec3 vUnpackNormal(vec2 v) {
		vec2 n = vSampleNormal(v).xy * 2.0 - 1.0;
		return vec3(n.x, n.y, sqrt(1 - (n.x*n.x) + (n.y*n.y)));
	}

   vec3 vGetVertexNormal() {
      return vSampleNormal(vGetNormalTexCoord()).xyz;
   }
   #define F_vGetVertexNormal
#else
   vec2 vPackNormal(vec3 n) {
      vec2 enc = normalize(n.xy) * (sqrt(n.z*0.5+0.5));
	   enc = enc*0.5+0.5;
	   return enc;
   }

	vec4 vSampleNormal(vec2 v) {
		return ( vec4( 0.0 ) );
	}
#endif

#ifdef HAS_SPECULAR_AND_GLOSS_MAP
	uniform sampler2D sSpecularAndGlossMap;
	vec2 vGetSpecularAndGlossTexCoord() {
		return vGetTexCoord0();
	}

	vec4 vSampleSpecularAndGloss(vec2 v) {
		return texture(sSpecularAndGlossMap, v);
	}
#else
	vec2 vSampleSpecularAndGloss(vec2 v) {
		return ( vec2( 0.0 ) );
	}
#endif


/******************************************************************/
/*                       Functionals                              */
/******************************************************************/
#ifndef F_vGetVertexNormal
vec3 vGetVertexNormal() { return vec3(0.0, 0.0, 0.0); }
#endif

