
shader ForwardTemplate [Vertex, Surface, Lighting] {

   tags forward;

   pass PointLight { 
         
      import-cbuffer Light;
      import-cbuffer ObjectProperties;   

      texture-state {
         sampler s0 linear-clamp;
         unit _sDiffuseMap s0 (nameref=  "Diffuse.Texture", activate = DiffuseMap, contex = material);
         unit _sSpecularAndGlossMap s0 (nameref = "Specular.Texture", activate = SpecularAndGlossMap, contex = material);
         unit _sNormalMap s0 (nameref = "Normal.Texture", activate = NormalMap, contex = material); 
         unit _sDetailMap s0 (nameref = "Detail.Texture", activate = DetailMap, contex = material); 
      }

      depth-stencil-state {
         depth-state test-and-write;
         stencil-state disable;
      }

      raster-state default;

      blend-state disable;

      program {
      
         activate DiffuseMap HAS_DIFFUSE_MAP HAS_TEXCOORD0_CHANNEL;
         activate NormalMap HAS_NORMAL_MAP  HAS_TEXCOORD0_CHANNEL HAS_BINORMAL_CHANNEL HAS_TANGENT_CHANNEL HAS_NORMAL_CHANNEL;
         activate DetailMap HAS_DETAIL_MAP HAS_TEXCOORD0_CHANNEL;
         activate SpecularAndGlossMap HAS_SPECULAR_AND_GLOSS_MAP  HAS_TEXCOORD0_CHANNEL;
         activate always HAS_NORMAL_CHANNEL;
                
         
         vertex-program $Vertex Geometry;
         fragment-program SurfaceSetup $Surface LightSetup $Lighting Forward;
      }
   }


}
