
{{predefs:vertex-program:all}}

#ifdef DiffuseMap

#define HAS_DIFFUSE_MAP
#define HAS_TEXCOORD0_CHANNEL
#define HAS_TEXCOORD0_CHANNEL_OUT

#endif

#ifdef NormalMap

#define HAS_NORMAL_MAP  
#define HAS_BINORMAL_CHANNEL 
#define HAS_BINORMAL_CHANNEL_OUT 
#define HAS_TANGENT_CHANNEL 
#define HAS_TANGENT_CHANNEL_OUT;

#else

#define HAS_NORMAL_CHANNEL
#define HAS_NORMAL_CHANNEL_OUT

#endif

{{predefs:fragment-program:all}}

#ifdef FW_DIFFUSE_MAP

#define HAS_DIFFUSE_MAP
#define HAS_TEXCOORD0_CHANNEL
#define HAS_TEXCOORD0_CHANNEL_OUT

#endif

#ifdef FW_NORMAL_MAP

#define HAS_NORMAL_MAP  
#define HAS_BINORMAL_CHANNEL 
#define HAS_BINORMAL_CHANNEL_OUT 
#define HAS_TANGENT_CHANNEL 
#define HAS_TANGENT_CHANNEL_OUT;

#else

#define HAS_NORMAL_CHANNEL
#define HAS_NORMAL_CHANNEL_OUT

#endif

[[main]]
shader ForwardTemplate [Vertex, Surface, Lighting] {

   tags forward;

   pass PointLight { 
         
      // @urgent FIXME It makes sense to have options, which activates certain options, not the other way round
      import-cbuffer Light;
      import-cbuffer ObjectProperties;   
      
      texture-state {
         sampler s0 linear-clamp;
         unit sDiffuseMap s0 (nameref=  "Diffuse.Texture", set = [DiffuseMap = 1, DiffuseScaleAndStuff = 2], context = material);
         unit sSpecularAndGlossMap s0 (nameref = "Specular.Texture", set = SpecularAndGlossMap = 1, context = material);
         unit sNormalMap s0 (nameref = "Normal.Texture", set = NormalMap:1, context = material); 
         unit sDetailMap s0 (nameref = "Detail.Texture", set = DetailMap:1, context = material); 
      }

      depth-stencil-state {
         depth-state test-and-write;
         stencil-state disable;
      }

      raster-state default;

      blend-state disable;

      program {         
         vertex-program $Vertex Geometry;
         fragment-program SurfaceSetup $Surface LightSetup $Lighting Forward;
      }
   }

}
