/*
 * ScriptStrings.h
 *
 *  Created on: 19-May-2014
 *      Author: obhi
 */

#ifndef SCRIPTSTRINGS_H_
#define SCRIPTSTRINGS_H_

#if defined(NEX_MATERIAL_STRINGS_DEFINE)
#define SCRIPT_STRING(str, what)	const char* SCRIPT_##str=what
#else
#define SCRIPT_STRING(str, what)	extern const char* SCRIPT_##str
#endif
#define _SS(str) SCRIPT_##str

namespace MaterialLoader {

SCRIPT_STRING(LANG_GLSL, "glsl");
SCRIPT_STRING(LANG_HLSL, "hlsl");
SCRIPT_STRING(REGION_SHADER, "shader");
SCRIPT_STRING(CMD_SHADER, _SS(REGION_SHADER));
SCRIPT_STRING(CMD_BLEND_STATE, "blend_state");
SCRIPT_STRING(CMD_DEPTH_STENCIL_STATE, "depth_stencil_state");
SCRIPT_STRING(CMD_RASTER_STATE, "raster_state");
SCRIPT_STRING(CMD_TEXTURE_STATE, "texture_state");
SCRIPT_STRING(CMD_BLEND, "blend");
SCRIPT_STRING(CMD_TARGET, "target");
SCRIPT_STRING(CMD_DEPTH_STATE, "depth_state");
SCRIPT_STRING(CMD_STENCIL_BACK_OP, "stencil_back");
SCRIPT_STRING(CMD_STENCIL_FRONT_OP, "stencil_front");
SCRIPT_STRING(CMD_STENCIL_TEST, "stencil_test");
SCRIPT_STRING(CMD_ANTI_ALIASING, "anti_aliasing");
SCRIPT_STRING(CMD_DEPTH_BIAS, "depth_bias");
SCRIPT_STRING(CMD_DEPTH_CLIP, "depth_clip");
SCRIPT_STRING(CMD_RASTER, "raster");
SCRIPT_STRING(CMD_SCISSOR, "scissor");
SCRIPT_STRING(CMD_FRAGMENT_PROG, "fragment_program");
SCRIPT_STRING(CMD_GEOMETRY_PROG, "geometry_program");
SCRIPT_STRING(CMD_VERTEX_PROG, "vertex_program");
SCRIPT_STRING(CMD_HULL_PROG, "hull_program");
SCRIPT_STRING(CMD_DOMAIN_PROG, "domain_program");
SCRIPT_STRING(CMD_OPTION, "option");
SCRIPT_STRING(CMD_PARAM, "param");
SCRIPT_STRING(ARG_ALWAYS, "always");
SCRIPT_STRING(ARG_EQUAL, "equal");
SCRIPT_STRING(ARG_GREATER, "greater");
SCRIPT_STRING(ARG_GREATER_EQUAL, "greater_equal");
SCRIPT_STRING(ARG_LESS, "less");
SCRIPT_STRING(ARG_LESS_EQUAL, "less_equal");
SCRIPT_STRING(ARG_NEVER, "never");
SCRIPT_STRING(ARG_NOT_EQUAL, "not_equal");
SCRIPT_STRING(ARG_DECREMENT, "decrement");
SCRIPT_STRING(ARG_DECREMENT_SATURATE, "decrement_saturate");
SCRIPT_STRING(ARG_INCREMENT, "increment");
SCRIPT_STRING(ARG_INCREMENT_SATURATE, "increment_saturate");
SCRIPT_STRING(ARG_INVERT, "invert");
SCRIPT_STRING(ARG_KEEP, "keep");
SCRIPT_STRING(ARG_REPLACE, "replace");
SCRIPT_STRING(ARG_ZERO, "zero");
SCRIPT_STRING(ARG_ONE, "zero");
SCRIPT_STRING(ARG_DEST_ALPHA, "dest_alpha");
SCRIPT_STRING(ARG_DEST_COLOR, "dest_color");
SCRIPT_STRING(ARG_INV_DEST_ALPHA, "inv_dest_alpha");
SCRIPT_STRING(ARG_INV_DEST_COLOR, "inv_dest_color");
SCRIPT_STRING(ARG_SRC_ALPHA, "src_alpha");
SCRIPT_STRING(ARG_SRC_COLOR, "src_color");
SCRIPT_STRING(ARG_INV_SRC_ALPHA, "inv_src_alpha");
SCRIPT_STRING(ARG_INV_SRC_COLOR, "inv_src_color");
SCRIPT_STRING(ARG_ADD, "add");
SCRIPT_STRING(ARG_INV_SUB, "inv_sub");
SCRIPT_STRING(ARG_MAX, "max");
SCRIPT_STRING(ARG_MIN, "min");
SCRIPT_STRING(ARG_SUB, "sub");
SCRIPT_STRING(ARG_SOLID, "solid");
SCRIPT_STRING(ARG_WIRE, "wire");
SCRIPT_STRING(ARG_POINT, "point");
SCRIPT_STRING(ARG_FRONT, "front");
SCRIPT_STRING(ARG_BACK, "back");
SCRIPT_STRING(ARG_NONE, "none");
SCRIPT_STRING(ARG_ALL, "all");
SCRIPT_STRING(ARG_LINEAR, "linear");
SCRIPT_STRING(ARG_LINEAR_MIP_LINEAR, "linear_mip_linear");
SCRIPT_STRING(ARG_LINEAR_MIP_NEAREST, "linear_mip_nearest");
SCRIPT_STRING(ARG_NEAREST, "nearest");
SCRIPT_STRING(ARG_NEAREST_MIP_LINEAR, "nearest_mip_linear");
SCRIPT_STRING(ARG_NEAREST_MIP_NEAREST, "nearest_mip_nearest");
SCRIPT_STRING(ARG_BORDER, "border");
SCRIPT_STRING(ARG_CLAMP, "clamp");
SCRIPT_STRING(ARG_MIRROR, "mirror");
SCRIPT_STRING(ARG_WARP, "warp");

}

#endif /* SCRIPTSTRINGS_H_ */
