/*============================================================================*/
%skeleton "lalr1.cc"
%name-prefix "neo_"

%defines
%define parser_class_name {neo_parser_impl}
%define api.namespace {nextar}
%define api.token.constructor
%define api.value.type variant
%define parse.assert
%define parse.trace
%define parse.error verbose

%code requires
{
#include <NeoBaseDecl.h>
#include <ParseLocation.h>
#include <ASTParameter.h>
#include <ASTDocument.h>
#include <ASTCommand.h>
#include <ASTRegion.h>
#include <ASTTextRegion.h>
#include <ASTVisitor.h>
#include <ASTBlock.h>
#include <ASTBlockRegion.h>
namespace nextar {
  class ParseLocation;
  class ParserContext;
}
#ifndef YY_NULLPTR
#  define YY_NULLPTR nullptr
#endif
#define YY_DECL extern nextar::neo_parser_impl::symbol_type neo_lex(nextar::ParserContext& b, void* yyscanner)

}

%define api.location.type {nextar::ParseLocation}
%param { ParserContext& b }
%lex-param { void* SCANNER_PARAM  }
%locations
%initial-action
{
  @$.begin._fileName = @$.end._fileName = &b.GetFileName();
}

%code
{
#include "ParserContext.h"
#define SCANNER_PARAM b._scanner
YY_DECL;
}

%token 
	END 0 "end of file"
	SEMICOLON ";"
	LBRACKET  "{"
	RBRACKET  "}"
	LSQBRACKET "["
	RSQBRACKET "]"
	COMMA      ","
   LBRACES    "("
   RBRACES    ")"
   ASSIGN     "="
	;

%token <String> REGION_ID TEXT_REGION_ID TEXT_CONTENTS IDENTIFIER STRING_LITERAL

// Types
%type <ASTDocumentPtr> script  named_regions.1.N
%type <ASTRegionPtr> named_region unnamed_region
%type <ASTCommandPtr> command
%type <ASTCommandList> commands.0.N commands.1.N
%type <ASTParameter> special_parameter special_parameters.0.N parameters.0.N parameter list

%printer { yyoutput << $$; } <String>

%start script

%%
/*============================================================================*/
script:                                  { $$.Clear(); }
		| named_regions.1.N                { $$ = $1; }
		| unnamed_region                   { $$ = b.MakeDocument($1); }
		| unnamed_region named_regions.1.N { $2->AddRegionFront($1); $$ = $2; }
		;

named_regions.1.N: named_region             { $$ = b.MakeDocument($1); }
			  | named_regions.1.N named_region { $1->AddRegion($2); $$ = $1; }
			  ;

unnamed_region: commands.1.N          { $$ = b.MakeBlockRegion("", std::move($1)); }
				  ;

named_region: REGION_ID commands.0.N  { $$ = b.MakeBlockRegion($1, std::move($2)); }
		| TEXT_REGION_ID TEXT_CONTENTS  { $$ = b.MakeTextRegion($1, std::move($2)); }
		;

commands.0.N:                         {  }
				| commands.1.N            { $$ = std::move($1); }

commands.1.N: command                 { if ($1) $$.push_back($1); }
				| commands.1.N command    { if ($2) $1.push_back($2); $$ = $1; }
				;

command: SEMICOLON                          { $$.Clear(); }
		 | IDENTIFIER parameters.0.N SEMICOLON   { $$ = b.MakeCommand($1, std::move($2)); }
		 | IDENTIFIER parameters.0.N LBRACKET commands.0.N RBRACKET
		 {
			 /* returns $4 if its not null with appropriate stuff */
			 $$ = b.MakeBlock($1, std::move($2), std::move($4));
		 }
		 ;

parameters.0.N:                           { }
				  | parameters.0.N parameter  { $1.Append($2); $$ = std::move($1); }
              | parameters.0.N LBRACES special_parameters.0.N RBRACES { $1.Append($3); $$ = std::move($1); }
				  ;

special_parameters.0.N:            {  }
         | special_parameter       { $$ = $1; }
         | special_parameters.0.N COMMA special_parameter { $1.Append($3); $$ = std::move($1); }

special_parameter: IDENTIFIER  ASSIGN  parameter { $3.SetName($1); $$ = std::move($3); }

parameter: STRING_LITERAL                 { $$ = $1; }
			| IDENTIFIER                        { $$ = $1; }
			| LSQBRACKET list RSQBRACKET     { $$ = std::move($2); }
			;

list:  parameters.0.N                          { $$ = $1; }
	 |  list COMMA parameters.0.N               { $1.Append($3); $$ = std::move($1); }
	 ;

%%
/*============================================================================*/

namespace nextar {

void neo_parser_impl::error(const location_type& l,
												  const std::string& e) {
  b.Error(l, e.c_str());
  NEX_THROW_GracefulError(EXCEPT_COMPILATION_FAILED);
}

ASTDocumentPtr ParserContext::Parse() {
	BeginScan();
	neo_parser_impl parser(*this);
	parser.set_debug_level(_traceParsing);
	int res = parser.parse();
	EndScan();
	if (res)
		return ASTDocumentPtr();
	return _document;
}

}
